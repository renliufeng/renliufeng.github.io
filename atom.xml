<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Crazy Boy]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://i.lovejojo.ren/"/>
  <updated>2019-06-06T10:16:52.000Z</updated>
  <id>http://i.lovejojo.ren/</id>
  
  <author>
    <name><![CDATA[Steven Ren]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hexo-head-picture-rotate]]></title>
    <link href="http://i.lovejojo.ren/2019/06/06/hexo-head-picture-rotate/"/>
    <id>http://i.lovejojo.ren/2019/06/06/hexo-head-picture-rotate/</id>
    <published>2019-06-06T10:07:13.000Z</published>
    <updated>2019-06-06T10:16:52.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo Next主题将头像显示成圆形，鼠标放上去有旋转效果。<br>将头像显示成圆形，鼠标放上去有旋转效果。<br>找到/themes/next/source/css/_common/components/sidebar/sidebar-author.styl<br>替换其中的site-author-img和site-author-image:hover属性</p>
<a id="more"></a>
<h1 id="头像显示圆形">头像显示圆形</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.site-author-image</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> $site-author-image-padding</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> $site-author-image-width</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> $site-author-image-height</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> site-author-image-border-color</span></span>;</span><br><span class="line">  <span class="comment">/* start*/</span></span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span><br><span class="line">  webkit-transition: <span class="number">1.4s</span> all</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">moz-transition</span>:<span class="value"> <span class="number">1.4s</span> all</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">ms-transition</span>:<span class="value"> <span class="number">1.4s</span> all</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">transition</span>:<span class="value"> <span class="number">1.4s</span> all</span></span>;</span><br><span class="line">  <span class="comment">/* end */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="头像旋转事件">头像旋转事件</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* start */</span></span><br><span class="line"><span class="class">.site-author-image</span><span class="pseudo">:hover</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#55DAE1</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">webkit-transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">scale</span>(<span class="number">1.1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">moz-transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">scale</span>(<span class="number">1.1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">ms-transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">scale</span>(<span class="number">1.1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">360deg</span>) <span class="function">scale</span>(<span class="number">1.1</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="comment">/* end */</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo Next主题将头像显示成圆形，鼠标放上去有旋转效果。<br>将头像显示成圆形，鼠标放上去有旋转效果。<br>找到/themes/next/source/css/_common/components/sidebar/sidebar-author.styl<br>替换其中的site-author-img和site-author-image:hover属性</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://i.lovejojo.ren/tags/hexo/"/>
    
      <category term="博客" scheme="http://i.lovejojo.ren/categories/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ddd-change-in-trade]]></title>
    <link href="http://i.lovejojo.ren/2018/10/30/ddd-change-in-trade/"/>
    <id>http://i.lovejojo.ren/2018/10/30/ddd-change-in-trade/</id>
    <published>2018-10-30T09:51:43.000Z</published>
    <updated>2019-06-06T10:16:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>互联网行业追求“快速迭代”，在整个过程中，用户的需求总是善变的，那系统领域中又有哪些是不变与易变的呢。<br>针对到店综合多种行业各种不同的交易流程进行分析，我们基本可以归纳出：<br>领域源于需求，但高于需求。相对于善变的用户需求而言，领域知识和领域模型本身是相对“静止”的，是“不变”的，会随着需求逐步演进。<br><a id="more"></a></p>
</blockquote>
<h2 id="问题与挑战">问题与挑战</h2><p>（1）到综行业多，同一种类型的业务差异也很大<br>        到综涉及结婚、丽人、亲子、休娱等10+大小BU，几十种行业，不同的行业有不同的玩法。即使是同一种预订业务，对于每种行业预订的商品、预订流程、结算流程，都有差异。比如ktv行业重时间包房管理，酒吧预订关注与订座位，体验课关注课程的时间预订。</p>
<p>（2）业务交易形态多样化<br>       不同的业务交易形态开始产生，比如丽人医美行业客单量大，项目重决策，团购就不太适合，衍生出线上预付定金，到店付尾款的模式。另外丽人美甲、足疗按摩等行业用户层面更愿意带客，所以从团购衍生出拼团的业务形态。另外还有买单的场景， 不同的业务形态，发货的时间点、方式，核销的时间点、结算的逻辑都有差异。</p>
<p>（3）需要支持的平台能力丰富<br>       交易流程整个环节中，需要对接各样的通用平台能力，例如点评-美团订单中心，客服系统、UGC评价。这么多业务，业务总会有一些定制化需求，如何能够统一快速支持，是一个挑战。</p>
<h2 id="核心思路与解法">核心思路与解法</h2><p>需求是千变万化的，不同的业务，不同的流程，如何能够稳定快速地支撑业务的需求是关键，主要考虑从以下两方面来进行。首先梳理出业务中的不变量，定下整体的领域模型与框架，再考虑通过配置化、开放定制化等能力去支撑业务定制化的需求。</p>
<h3 id="梳理业务中的不变量">梳理业务中的不变量</h3><p>针对第一个问题，项目初期，我们计划搭建一套通用的预订交易流程系统，但是虽然是预订业务，每个BU都会有差异。所以我们针对已有的定制开发的KTV预订和足疗预订去做了分析和总结，判断整个预订行业中有哪些是可以抽象出通用能力的。首先我们基于现有的部分需求，整理出每个BU的预订流程图，最后发现对于预订而言，整个流程是相似的，较大的差异性主要在于预订的商品和接单的流程。基于此会发现订单、商品、购买接单、核销、结算这几个大模块都是通用的。整个需要提供较多定制能力的模块主要在于商品模型与接单的模型。确定好方向之后，我们再对于子领域进行更细粒度的分析，在接单模型中，我们将接单规则配置和业务逻辑拆分。接单的逻辑可能会变，但接单领域模型里接单的规则配置确是可以固定不变的。<br>在通用预订的交易流程系统基本完善之后，我们面临着第二个问题，越来越多的业务形态开始出现。以拼团为例，在预订交易流程的基础上，我们发现整体的交易流程的模型都一样可以支持，有较大差异点仅在于购买流程上。针对于拼团，需要整个拼团拼团成功，才会真正发券。后续的核销、结算流程都是一样的，针对这些不变的领域，仅需要对业务进行扩充，就可以支持。在支持多种交易形态的过程中，我们发现已有的对接的一些平台能力，例如客服、评价、诚信等，都会有些差异。都可以采取一样的思路，先抽象出不变的部分，再针对有变化的部分通过配置化等方式支持特殊的定制。</p>
<h3 id="快速支撑不断变化的需求">快速支撑不断变化的需求</h3><p>（1）不同业务需要支持的不同场景</p>
<p>模型扩展：拼团等新业务刚出现的时候，原先模型可能无法支持的话，首先会从复用的角度去考虑对模型进行扩展。原先只支持到订单一个层级，抽象出父订单的模型-拼团，一个父订单下面会关联多个子订单。后续类似购物车等形态，都是可以通过此模型进行支持。</p>
<p>服务扩展：一些预订业务或新业务可能涉及到第三方对接的库存发货管理，我们通过新增服务的方式，将预订的流程开放出去，给到第三方接入的能力。这一块相对独立，支持定制，且不影响主流程。</p>
<p>（2）多样的平台能力的需求，如何稳定快速支持接入的需求</p>
<p>每一个新业务接入或者新的交易产生，对于用户中心订单列表、客服订单列表的展示和操作都有些定制需求，用户商户侧的评价也有展示的区别。主要思路：模块服务独立，不影响核心流程。单独子模块，再针对不同的业务提供定制化或者配置化的能力。</p>
<h2 id="具体方案及拆解">具体方案及拆解</h2><p>整体技术架构解决方案的思路都是从领域与微服务化的思路去考虑，如何能够很好地去分析领域模型和服务拆分，我们主要会从下面几个方向着手。</p>
<p>（1）梳理业务流程中通用流程节点</p>
<pre><code>在切分微服务之前，我们要做的第一件事情就是梳理业务流程。不妨找业务领域的专家咨询，通过与他们沟通从而了解真实的业务流程，并将其绘制成流程图。对于过于复杂的业务流程，我们也可单独绘制流程图，并增加相关的流程说明。当然也能提供相应的状态图，用于说明业务流程中所涉及状态的变化过程。花再多时间去分析业务流程都不过分，现在所花的每一分钟都是相当值得的。产品需求是多变的，但是对于交易流程而言，整体的领域模型基本是确定的。我们从目前互联网常见的一些业务着手分析：团购、拼团、预订、电商、外卖、猫眼等。
</code></pre><p>梳理完每块业务的整体流程后，我们整理下。</p>
<p>业务形态</p>
<p>发货模式</p>
<p>货物模型</p>
<p>核销方式</p>
<p>结算方式</p>
<p>团购</p>
<p>库存为主</p>
<p>团购券</p>
<p>到店验证</p>
<p>券核销后结算</p>
<p>拼团</p>
<p>拼团成功后扣库存</p>
<p>消费码</p>
<p>到店验证</p>
<p>消费码核销后结算</p>
<p>预订</p>
<p>库存/商家接单/第三方对接</p>
<p>消费码</p>
<p>到店验证</p>
<p>消费码核销后结算</p>
<p>电商/外卖</p>
<p>库存/商家接单</p>
<p>货物</p>
<p>用户收到货确认</p>
<p>订单核销后结算</p>
<p>猫眼</p>
<p>库存/商家接单</p>
<p>消费码/实体票</p>
<p>到店验证/收到货确认</p>
<p>订单核销后结算</p>
<p>通过整个交易流程的分析，大概抽象出来都是下面这个流程，每一个模块会有类似，也有差异。</p>
<p>（2）梳理出系统各种聚合功能模块</p>
<pre><code>我们可以对系统的功能进行一个发散的整理，最终明确整个系统的核心“用户”。比如交易流程，核心“用户”就是订单，整套系统都是围绕着订单在走。
</code></pre><p>（3）归纳整理出业务的整体框架</p>
<p>基于上面的分析，我们可以整理出整块交易流程业务的整体框架。</p>
<p>（4）抽取公共服务（不变）</p>
<pre><code>一般服务拆分首先考虑横向拆分。按照不同的业务领域进行拆分，例如订单、商品、消费码、结算等，形成独立的业务领域微服务集群。其次，要做好微服务的分层：梳理和抽取核心应用、公共应用，作为独立的服务下沉到核心和公共能力层，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。在业务流程中与业务不太相关的部分，我们可考虑将其剥离出来，并形成公共服务。例如，价格服务、库存管理服务、销量服务其他第三方接口等。一般情况下，抽取的公共服务都不太会经常变化，所以“一个月内是否会有频繁改动”这也是我们抽取公共服务的一个判断标准。我们一定要想办法将不变的东西从可变的世界中抽取出来。每种公共服务都对应一个微服务，每个微服务都有相关API，方便其他服务调用。目前公司推动的服务化就是在完善这方面的基础建设。
</code></pre><p>（5）定义业务服务（易变）</p>
<pre><code>当公共服务抽取完毕后，业务流程中剩下来的部分就是业务服务了。建议刚开始实施项目的时候，不需要将业务服务的边界切得太细，可以考虑先“大切几块”，但需要确保每个服务之间尽量不要有依赖关系。换句话说，每个服务都是独立的，虽然此时服务的块头可能比较大。目前交易侧主要分了几块比较大的服务，后面针对丰富的需求可以再逐渐不断扩张。我们先确保这些大块头服务可以运行在微服务基础设施上，再不断将它们进行细化，拆解为更小的服务。
</code></pre><h2 id="结果及收益">结果及收益</h2><h3 id="总结">总结</h3><pre><code>多变的业务中，我们会发现核心流程基本不变，分支流程与业务逻辑是易变的。
</code></pre><p>针对于核心流程，如果有些需要品类与产品形态支持定制的，尽量通过配置化思路去解决。</p>
<p>而对于一些易变的流程或页面，可以分模块拆分出来，控制每个模块的影响范围，做到不涉及核心流程。</p>
<h3 id="效果">效果</h3><pre><code>目前交易流程已经支持了预订、点单、扫码付、一口价、拼团等多种业务形态，接入大小业务<span class="number">30</span>+，日订单量<span class="number">10</span>W，涉及到综所有BU。
</code></pre><p>通过对通用逻辑的抽象，目前交易流程新增业务1~2人周支持开发与联调即可。</p>
<p>能够在复用通用能力的同时，支持业务的定制能力。</p>
<h3 id="未来的方向">未来的方向</h3><pre><code>目前领域模型的划分还是相对较粗，业务订单和统一订单的分工职责需要明确。
</code></pre><p>应用架构上，会针对不断变化的交易形态，拆分出更多业务逻辑层的服务出来。同时，后续也会提供越来越多的交易有关的平台能力提供给业务侧去使用。</p>
<p>针对业务复杂变化较大的发货服务领域，会做更细的拆分，把其中接单、第三方对接等等抽象出公用的基础服务，在上层支持丰富的业务定逻辑。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>互联网行业追求“快速迭代”，在整个过程中，用户的需求总是善变的，那系统领域中又有哪些是不变与易变的呢。<br>针对到店综合多种行业各种不同的交易流程进行分析，我们基本可以归纳出：<br>领域源于需求，但高于需求。相对于善变的用户需求而言，领域知识和领域模型本身是相对“静止”的，是“不变”的，会随着需求逐步演进。<br>]]>
    
    </summary>
    
      <category term="ddd" scheme="http://i.lovejojo.ren/tags/ddd/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跨域资源共享 CORS 简介]]></title>
    <link href="http://i.lovejojo.ren/2018/06/06/cros-introduce/"/>
    <id>http://i.lovejojo.ren/2018/06/06/cros-introduce/</id>
    <published>2018-06-06T08:06:08.000Z</published>
    <updated>2019-06-06T10:16:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>本文详细介绍CORS的内部机制。<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="external">CORS官方解释</a></p>
</blockquote>
<h2 id="简介">简介</h2><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br><a id="more"></a></p>
<h2 id="两种请求">两种请求</h2><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>只要同时满足以下两大条件，就属于简单请求。<br>（1) 请求方法是以下三种方法之一：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HEAD</span><br><span class="line"><span class="literal">GET</span></span><br><span class="line"><span class="keyword">POST</span></span><br></pre></td></tr></table></figure></p>
<p>（2）HTTP的头信息不超出以下几种字段：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-<span class="keyword">Type</span>：只限于三个值application/x-www-<span class="keyword">form</span>-urlencoded、multipart/<span class="keyword">form</span>-<span class="type">data</span>、text/plain</span><br></pre></td></tr></table></figure></p>
<p>凡是不同时满足上面两个条件，就属于非简单请求。浏览器对这两种请求的处理，是不一样的。</p>
<h2 id="简单请求">简单请求</h2><h3 id="基本流程">基本流程</h3><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。<br>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">GET <span class="string">/cors</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span>: <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">api.alice.com</span></span><br><span class="line"><span class="attribute">Accept-Language</span>: <span class="string">en-US</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">keep-alive</span></span><br><span class="line"><span class="attribute">User-Agent</span>: <span class="string">Mozilla/5.0...</span></span><br></pre></td></tr></table></figure></p>
<p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。<br>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: <span class="string">true</span></span><br><span class="line"><span class="attribute">Access-Control-Expose-Headers</span>: <span class="string">FooBar</span></span><br><span class="line"><span class="attribute">Content-Type</span>: <span class="string">text/html; charset=utf-8</span></span><br></pre></td></tr></table></figure>
<p>上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。</p>
<p>（1）Access-Control-Allow-Origin<br>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p>
<p>（2）Access-Control-Allow-Credentials<br>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p>
<p>（3）Access-Control-Expose-Headers<br>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p>
<h3 id="withCredentials_属性">withCredentials 属性</h3><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p>
<p>Access-Control-Allow-Credentials: true<br>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p>
<p>var xhr = new XMLHttpRequest();<br>xhr.withCredentials = true;<br>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p>
<p>xhr.withCredentials = false;<br>需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>
<h2 id="非简单请求">非简单请求</h2><h3 id="预检请求">预检请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。<br>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。<br>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<p>下面是一段浏览器的JavaScript脚本。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="symbol">'http</span>:<span class="comment">//api.alice.com/cors';</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br><span class="line">xhr.open(<span class="symbol">'PU</span>T', url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="symbol">'X</span>-<span class="type">Custom</span>-<span class="type">Header</span>', <span class="symbol">'valu</span>e');</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p>
<p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">OPTIONS <span class="string">/cors</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span>: <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: <span class="string">PUT</span></span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: <span class="string">X-Custom-Header</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">api.alice.com</span></span><br><span class="line"><span class="attribute">Accept-Language</span>: <span class="string">en-US</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">keep-alive</span></span><br><span class="line"><span class="attribute">User-Agent</span>: <span class="string">Mozilla/5.0...</span></span><br></pre></td></tr></table></figure></p>
<p>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p>
<p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。<br>（1）Access-Control-Request-Method<br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。<br>（2）Access-Control-Request-Headers<br>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p>
<h3 id="预检请求的回应">预检请求的回应</h3><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="status">HTTP/1.1 <span class="number">200</span> OK</span></span><br><span class="line"><span class="attribute">Date</span>: <span class="string">Mon, 01 Dec 2008 01:15:39 GMT</span></span><br><span class="line"><span class="attribute">Server</span>: <span class="string">Apache/2.0.61 (Unix)</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: <span class="string">GET, POST, PUT</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: <span class="string">X-Custom-Header</span></span><br><span class="line"><span class="attribute">Content-Type</span>: <span class="string">text/html; charset=utf-8</span></span><br><span class="line"><span class="attribute">Content-Encoding</span>: <span class="string">gzip</span></span><br><span class="line"><span class="attribute">Content-Length</span>: <span class="string">0</span></span><br><span class="line"><span class="attribute">Keep-Alive</span>: <span class="string">timeout=2, max=100</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">Keep-Alive</span></span><br><span class="line"><span class="attribute">Content-Type</span>: <span class="string">text/plain</span></span><br></pre></td></tr></table></figure>
<p>上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示<a href="http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。" target="_blank" rel="external">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p>
<p>Access-Control-Allow-Origin: *<br>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p>
<p>XMLHttpRequest cannot load <a href="http://api.alice.com" target="_blank" rel="external">http://api.alice.com</a>.<br>Origin <a href="http://api.bob.com" target="_blank" rel="external">http://api.bob.com</a> is not allowed by Access-Control-Allow-Origin.<br>服务器回应的其他CORS相关字段如下。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: <span class="string">GET, POST, PUT</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: <span class="string">X-Custom-Header</span></span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: <span class="string">true</span></span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: <span class="string">1728000</span></span><br></pre></td></tr></table></figure></p>
<p>（1）Access-Control-Allow-Methods<br>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p>
<p>（2）Access-Control-Allow-Headers<br>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p>
<p>（3）Access-Control-Allow-Credentials<br>该字段与简单请求时的含义相同。</p>
<p>（4）Access-Control-Max-Age<br>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p>
<h3 id="浏览器的正常请求和回应">浏览器的正常请求和回应</h3><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p>下面是”预检”请求之后，浏览器的正常CORS请求。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">PUT <span class="string">/cors</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span>: <span class="string">http://api.bob.com</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">api.alice.com</span></span><br><span class="line"><span class="attribute">X-Custom-Header</span>: <span class="string">value</span></span><br><span class="line"><span class="attribute">Accept-Language</span>: <span class="string">en-US</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">keep-alive</span></span><br><span class="line"><span class="attribute">User-Agent</span>: <span class="string">Mozilla/5.0...</span></span><br></pre></td></tr></table></figure></p>
<p>上面头信息的Origin字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//api.bob.com</span></span><br><span class="line">Content-<span class="string">Type:</span> text/html; charset=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure></p>
<p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p>
<h2 id="与JSONP的比较">与JSONP的比较</h2><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p>
<p>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>本文详细介绍CORS的内部机制。<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS官方解释</a></p>
</blockquote>
<h2 id="简介">简介</h2><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br>]]>
    
    </summary>
    
      <category term="CORS" scheme="http://i.lovejojo.ren/tags/CORS/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo博客中如何插入图片]]></title>
    <link href="http://i.lovejojo.ren/2017/06/06/hexo-insert-picture/"/>
    <id>http://i.lovejojo.ren/2017/06/06/hexo-insert-picture/</id>
    <published>2017-06-06T09:57:55.000Z</published>
    <updated>2019-06-06T10:16:52.000Z</updated>
    <content type="html"><![CDATA[<p>在网上查了一下有以下几种方式往hexo文章中插入图片</p>
<p>## 本地引用</p>
<h3 id="绝对路径">绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。对于source/images/image.jpg这张图片可以用以下语法访问到<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="attr_selector">[]</span>(/images/image.jpg)</span><br></pre></td></tr></table></figure></p>
<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>
<a id="more"></a>
<h3 id="相对路径">相对路径</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的_config.yml来生成。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。_posts/post_name/image.jpg这张照片可以用以下方式访问：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="attr_selector">[]</span>(<span class="tag">image</span><span class="class">.jpg</span>)</span><br></pre></td></tr></table></figure></p>
<p>上述markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。<br>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。_posts/post_name/image.jpg这张照片可以用以下方式访问：</p>

<h2 id="CDN引用">CDN引用</h2><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。因国内访问github速度较慢，所以将突破放到国内图床上，然后引用外链是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="external">https://sspai.com/post/40499</a></p>
<p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。<br>当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生<br>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。</p>
<p>微博图床（Chrome浏览器有个“新浪微博图床”插件，可以自动生成markdown链接）简单方便<br>七牛：需要注册且实名认证等太麻烦，放弃<br>腾讯云等云存储服务，需要先将照片放到云盘，然后找到超链接，然后粘贴到文章。太麻烦，放弃。<br>【强烈推荐！！！】ipic 工具，具体用法请谷歌，支持监控剪贴板，一键上传到微博图床，免费版默认是微博图床，支持七牛云等，下载地址: <a href="https://itunes.apple.com/cn/app/id1101244278?mt=12" target="_blank" rel="external">https://itunes.apple.com/cn/app/id1101244278?mt=12</a></p>
<h2 id="使用GitHub存储博客图片">使用GitHub存储博客图片</h2><p>创建一个空的repo<br>然后将图片push到repo中<br>点击图片进去，有个download，右键复制链接<br>将链接插入文章<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">logo</span>](<span class="link_url">https://github.com/xxxx/xx.jpg</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在网上查了一下有以下几种方式往hexo文章中插入图片</p>
<p>## 本地引用</p>
<h3 id="绝对路径">绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。对于source/images/image.jpg这张图片可以用以下语法访问到<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="attr_selector">[]</span>(/images/image.jpg)</span><br></pre></td></tr></table></figure></p>
<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://i.lovejojo.ren/tags/hexo/"/>
    
      <category term="图片" scheme="http://i.lovejojo.ren/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[maven 依赖管理的最佳实践]]></title>
    <link href="http://i.lovejojo.ren/2017/05/27/maven-perfect-practice/"/>
    <id>http://i.lovejojo.ren/2017/05/27/maven-perfect-practice/</id>
    <published>2017-05-27T06:56:18.000Z</published>
    <updated>2017-05-27T07:01:39.000Z</updated>
    <content type="html"><![CDATA[<p>一般一个父pom项目下面常常有好几个子pom项目模块，而且几个子模块依赖的很多jar包，比如groupId/artifactid/version都是相同的，这样有三个弊端：<br>(1) 造成jar包重复依赖<br>(2) 造成版本号重复依赖<br>(3) 升级某个版本号时，要修改好几个子模块</p>
<a id="more"></a>
<p>一、在父模块中定义全部dependencies</p>
<p>在父模块中配置dependencies，那样所有子模块都自动继承。</p>
<p>例如在父pom文件中定义好我们需要的全部jar：</p>
<p>Java代码  收藏代码</p>
<dependencies><br>    <dependency><br>      <groupid>junit</groupid><br>      <artifactid>junit</artifactid><br>      <version>4.8.2</version><br>      <scope>test</scope><br>    </dependency><br>    <dependency><br>      <groupid>log4j</groupid><br>      <artifactid>log4j</artifactid><br>      <version>1.2.16</version><br>    </dependency><br></dependencies>  


<p>这样子模块只要继承父模块就能直接使用这些jar包，不仅达到了依赖一致的目的，还省掉了大段代码。</p>
<p>然而：这么做是有些不妥的地方，例如某个子模块，比如A不需要父模块log4j的依赖，但也直接继承了，造成了jar包臃肿，多余依赖。</p>
<p>二、在父模块中定义全部dependencyManagement</p>
<p>我们需要一种在父模块中定义好全部的jar包依赖，而子模块需要哪一种指定哪一种，这样既做到了集中式配置，又做到了子模块需要什么配置什么的灵活性。</p>
<p>而dependencyManagement就可以做到。针对这个问题我们可以使用继承机制以及dependencyManagement元素就能解决这个问题。</p>
<p>dependencyManagement只会影响现有依赖的配置，但不会引入依赖。</p>
<p>例如我们可以在父模块中配置如下： </p>
<p>Java代码  收藏代码</p>
<dependencymanagement><br>  <dependencies><br>    <dependency><br>      <groupid>junit</groupid><br>      <artifactid>junit</artifactid><br>      <version>4.8.2</version><br>      <scope>test</scope><br>    </dependency><br>    <dependency><br>      <groupid>log4j</groupid><br>      <artifactid>log4j</artifactid><br>      <version>1.2.16</version><br>    </dependency><br>  </dependencies><br></dependencymanagement>  


<p>这段配置不会给任何子模块引入依赖，但如果某个子模块需要使用JUnit和Log4j的时候，我们就可以简化依赖配置成这样：</p>
<p>Java代码  收藏代码</p>
<dependency><br>    <groupid>junit</groupid><br>    <artifactid>junit</artifactid><br>  </dependency><br>  <dependency><br>    <groupid>log4j</groupid><br>    <artifactid>log4j</artifactid><br></dependency>  


<p>不要的模块，就不需要引入，而dependencyManagement完美的做到了这点。</p>
<p>现在只需要groupId和artifactId，其它元素如version和scope都能通过继承父POM的dependencyManagement得到，如果有依赖配置了exclusions，那节省的代码就更加可观。</p>
<p>但重点不在这，重点在于现在能够保证所有模块使用的JUnit和Log4j依赖配置是一致的。而且子模块仍然可以按需引入依赖， 如果我不配置log4j</p>
<p>dependency，父模块中dependencyManagement下的log4j依赖不会对子模块产生任何影响。</p>
<p>然而，如果在父模块中引入了大量的jar包依赖，这个父模块的dependencyManagement就会包含大量的依赖，如果你想把这些依赖分类以更清晰的管理，那就不可能了。</p>
<p>三、使用import单独出dependencyManagement<br>此时为了应对父模块中引入了大量的jar包依赖造成父模块臃肿，我们需要一种可以把dependencyManagement放到外面去分开管理，这样很清晰很多，才能更好的管理更多的jar。</p>
<p>而import scope依赖能解决这个问题。</p>
<p>我们可以把dependencyManagement放到单独的专门用来管理依赖的POM中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。</p>
<p>1、我们可以写这样一个用于依赖管理的子模块POM：</p>
<p>Java代码  收藏代码</p>
<project><br>  <modelversion>4.0.0</modelversion><br>  <groupid>wang.conge.demo</groupid><br>  <artifactid>sample-dependency-infrastructure</artifactid><br>  <packaging>pom</packaging><br>  <version>1.0-SNAPSHOT</version><br>  <dependencymanagement><br>    <dependencies><br>        <dependency><br>          <groupid>junit</groupid><br>          <artifactid>junit</artifactid><br>          <version>4.8.2</version><br>          <scope>test</scope><br>        </dependency><br>        <dependency><br>          <groupid>log4j</groupid><br>          <artifactid>log4j</artifactid><br>          <version>1.2.16</version><br>        </dependency><br>    </dependencies><br>  </dependencymanagement><br></project>  




<p>2、然后我们的父模块只需要通过非继承的方式来引入这段依赖管理配置：</p>
<p>Java代码  收藏代码</p>
<dependencymanagement><br>    <dependencies><br>        <dependency><br>          <groupid>wang.conge.demo</groupid><br>          <artifactid>sample-dependency-infrastructure</artifactid><br>          <version>1.0-SNAPSHOT</version><br>          <type>pom</type><br>          <scope>import</scope><br>        </dependency><br>    </dependencies><br>  </dependencymanagement>  


<p>3、最后我们的子模块需要哪个jar包就引入哪个jar包</p>
<p>Java代码  收藏代码</p>
<dependency><br>   <groupid>junit</groupid><br>   <artifactid>junit</artifactid><br> </dependency><br> <dependency><br>   <groupid>log4j</groupid><br>   <artifactid>log4j</artifactid><br> </dependency>  


<p>完美，有没有？</p>
<p>这样，父模块的POM就会非常简洁，由专门的子模块为pom的POM来管理依赖，也契合的面向对象设计中的单一职责原则。</p>
<p>此外，我们还能够创建多个这样的依赖管理POM，以更细化的方式管理依赖。这种做法与面向对象设计中使用组合而非继承也有点相似的味道。</p>
<p>事实上spring-boot非常的简洁已用，也是使用import的方式来管理那么多的jar包依赖的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般一个父pom项目下面常常有好几个子pom项目模块，而且几个子模块依赖的很多jar包，比如groupId/artifactid/version都是相同的，这样有三个弊端：<br>(1) 造成jar包重复依赖<br>(2) 造成版本号重复依赖<br>(3) 升级某个版本号时，要修改好几个子模块</p>]]>
    
    </summary>
    
      <category term="maven" scheme="http://i.lovejojo.ren/tags/maven/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java项目搭建中的开源组件]]></title>
    <link href="http://i.lovejojo.ren/2017/05/24/java-project-open-source/"/>
    <id>http://i.lovejojo.ren/2017/05/24/java-project-open-source/</id>
    <published>2017-05-24T09:19:00.000Z</published>
    <updated>2017-05-24T09:39:00.000Z</updated>
    <content type="html"><![CDATA[<p>想从零开始搭建一个Java Web的项目，并上线，需要涉及到多方面的框架与组件。<br>利用一些开源的组件和工具可以让效率更高，性能更好，可用性更高。<br>现在将搭建过程中用到的开源项目列出来，已作备忘。</p>
<p>##核心工具<br>代码仓库：</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>想从零开始搭建一个Java Web的项目，并上线，需要涉及到多方面的框架与组件。<br>利用一些开源的组件和工具可以让效率更高，性能更好，可用性更高。<br>现在将搭建过程中用到的开源项目列出来，已作备忘。</p>
<p>##核心工具<br>代码仓库：</p>
]]>
    </summary>
    
      <category term="java" scheme="http://i.lovejojo.ren/tags/java/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[项目交接说明]]></title>
    <link href="http://i.lovejojo.ren/2016/06/13/project-transfer-guide/"/>
    <id>http://i.lovejojo.ren/2016/06/13/project-transfer-guide/</id>
    <published>2016-06-13T07:41:37.000Z</published>
    <updated>2016-06-13T08:06:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="交接内容">交接内容</h2><p>项目git、数据库、作业、页面、权限<br>交接时间点<br>需求设计等文档<br>case情况</p>
<h2 id="交接关键点">交接关键点</h2><p>1.确认交接时间范围，交接完成之前需求、case均由前团队负责，交接之后需求、Case由新团队负责。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="交接内容">交接内容</h2><p>项目git、数据库、作业、页面、权限<br>交接时间点<br>需求设计等文档<br>case情况</p>
<h2 id="交接关键点">交接关键点</h2><p>1.确认交接时间范围，交接完成之前需求、case均由前团队负责，交]]>
    </summary>
    
      <category term="project" scheme="http://i.lovejojo.ren/tags/project/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Apache HttpClient 使用备忘]]></title>
    <link href="http://i.lovejojo.ren/2015/12/23/apache-httpclient-guide/"/>
    <id>http://i.lovejojo.ren/2015/12/23/apache-httpclient-guide/</id>
    <published>2015-12-23T08:58:31.000Z</published>
    <updated>2019-06-06T08:56:39.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），既提高了开发的效率，也方便提高代码的健壮性。<br><a id="more"></a></p>
</blockquote>
<h3 id="版本依赖">版本依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="特性">特性</h3><ol>
<li>基于标准、纯净的java语言。实现了Http1.0和Http1.1</li>
<li>以可扩展的面向对象的结构实现了Http全部的方法（GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE）。</li>
<li>支持HTTPS协议。</li>
<li>通过Http代理建立透明的连接。</li>
<li>利用CONNECT方法通过Http代理建立隧道的https连接。</li>
<li>Basic, Digest, NTLMv1, NTLMv2, NTLM2 Session, SNPNEGO/Kerberos认证方案。</li>
<li>插件式的自定义认证方案。</li>
<li>便携可靠的套接字工厂使它更容易的使用第三方解决方案。</li>
<li>连接管理器支持多线程应用。支持设置最大连接数，同时支持设置每个主机的最大连接数，发现并关闭过期的连接。</li>
<li>自动处理Set-Cookie中的Cookie。</li>
<li>插件式的自定义Cookie策略。</li>
<li>Request的输出流可以避免流中内容直接缓冲到socket服务器。</li>
<li>Response的输入流可以有效的从socket服务器直接读取相应内容。</li>
<li>在http1.0和http1.1中利用KeepAlive保持持久连接。</li>
<li>直接获取服务器发送的response code和 headers。</li>
<li>设置连接超时的能力。</li>
<li>实验性的支持http1.1 response caching。</li>
<li>源代码基于Apache License 可免费获取。</li>
</ol>
<h3 id="使用方法">使用方法</h3><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。</p>
<ol>
<li>创建HttpClient对象。</li>
<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。</li>
<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。</li>
<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。</li>
<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。</li>
<li>释放连接。无论执行方法是否成功，都必须释放连接</li>
</ol>
<h3 id="代码示例">代码示例</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ContentType;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.FileBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.content.StringBody;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class HttpClientTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> jUnitTest() &#123;</span><br><span class="line">        <span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * HttpClient连接SSL</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> ssl() &#123;</span><br><span class="line">        CloseableHttpClient httpclient = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            FileInputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"d:\\tomcat.keystore"</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 加载keyStore d:\\tomcat.keystore  </span></span><br><span class="line">                trustStore.load(instream, <span class="string">"123456"</span>.toCharArray());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    instream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 相信自己的CA和所有自签名的证书</span></span><br><span class="line">            SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(trustStore, <span class="keyword">new</span> TrustSelfSignedStrategy()).build();</span><br><span class="line">            <span class="comment">// 只允许使用TLSv1协议</span></span><br><span class="line">            SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(sslcontext, <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"TLSv1"</span>&#125;, <span class="keyword">null</span>,</span><br><span class="line">                    SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);</span><br><span class="line">            httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">            <span class="comment">// 创建http请求(get方式)</span></span><br><span class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"https://localhost:8443/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request"</span> + httpget.getRequestLine());</span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(response.getStatusLine());</span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content length: "</span> + entity.getContentLength());</span><br><span class="line">                    System.out.<span class="built_in">println</span>(EntityUtils.toString(entity));</span><br><span class="line">                    EntityUtils.consume(entity);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpclient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    httpclient.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post方式提交表单（模拟用户登录请求）</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postForm() &#123;</span><br><span class="line">        <span class="comment">// 创建默认的httpClient实例.  </span></span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 创建httppost  </span></span><br><span class="line">        HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line">        <span class="comment">// 创建参数队列  </span></span><br><span class="line">        List&lt;namevaluepair&gt; formparams = <span class="keyword">new</span> ArrayList&lt;namevaluepair&gt;();</span><br><span class="line">        formparams.<span class="built_in">add</span>(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, <span class="string">"admin"</span>));</span><br><span class="line">        formparams.<span class="built_in">add</span>(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        UrlEncodedFormEntity uefEntity;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            uefEntity = <span class="keyword">new</span> UrlEncodedFormEntity(formparams, <span class="string">"UTF-8"</span>);</span><br><span class="line">            httppost.setEntity(uefEntity);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request "</span> + httppost.getURI());</span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content: "</span> + EntityUtils.toString(entity, <span class="string">"UTF-8"</span>));</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 发送 post请求访问本地应用并根据传递参数不同返回不同结果</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> post() &#123;</span><br><span class="line">        <span class="comment">// 创建默认的httpClient实例.  </span></span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 创建httppost  </span></span><br><span class="line">        HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceJ.action"</span>);</span><br><span class="line">        <span class="comment">// 创建参数队列  </span></span><br><span class="line">        List&lt;namevaluepair&gt; formparams = <span class="keyword">new</span> ArrayList&lt;namevaluepair&gt;();</span><br><span class="line">        formparams.<span class="built_in">add</span>(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"type"</span>, <span class="string">"house"</span>));</span><br><span class="line">        UrlEncodedFormEntity uefEntity;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            uefEntity = <span class="keyword">new</span> UrlEncodedFormEntity(formparams, <span class="string">"UTF-8"</span>);</span><br><span class="line">            httppost.setEntity(uefEntity);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request "</span> + httppost.getURI());</span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content: "</span> + EntityUtils.toString(entity, <span class="string">"UTF-8"</span>));</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 发送 get请求</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">get</span>() &#123;</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建httpget.  </span></span><br><span class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request "</span> + httpget.getURI());</span><br><span class="line">            <span class="comment">// 执行get请求.  </span></span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取响应实体  </span></span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">                <span class="comment">// 打印响应状态  </span></span><br><span class="line">                System.out.<span class="built_in">println</span>(response.getStatusLine());</span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 打印响应内容长度  </span></span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content length: "</span> + entity.getContentLength());</span><br><span class="line">                    <span class="comment">// 打印响应内容  </span></span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content: "</span> + EntityUtils.toString(entity));</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"------------------------------------"</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接,释放资源  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 上传文件</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> upload() &#123;</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httppost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/myDemo/Ajax/serivceFile.action"</span>);</span><br><span class="line"></span><br><span class="line">            FileBody bin = <span class="keyword">new</span> FileBody(<span class="keyword">new</span> File(<span class="string">"F:\\image\\sendpix0.jpg"</span>));</span><br><span class="line">            StringBody comment = <span class="keyword">new</span> StringBody(<span class="string">"A binary file of some kind"</span>, ContentType.TEXT_PLAIN);</span><br><span class="line"></span><br><span class="line">            HttpEntity reqEntity = MultipartEntityBuilder.create().addPart(<span class="string">"bin"</span>, bin).addPart(<span class="string">"comment"</span>, comment).build();</span><br><span class="line"></span><br><span class="line">            httppost.setEntity(reqEntity);</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"executing request "</span> + httppost.getRequestLine());</span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(response.getStatusLine());</span><br><span class="line">                HttpEntity resEntity = response.getEntity();</span><br><span class="line">                <span class="keyword">if</span> (resEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Response content length: "</span> + resEntity.getContentLength());</span><br><span class="line">                &#125;</span><br><span class="line">                EntityUtils.consume(resEntity);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅使客户端发送Http请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），既提高了开发的效率，也方便提高代码的健壮性。<br>]]>
    
    </summary>
    
      <category term="Apache" scheme="http://i.lovejojo.ren/tags/Apache/"/>
    
      <category term="HTTP" scheme="http://i.lovejojo.ren/tags/HTTP/"/>
    
      <category term="HttpClient" scheme="http://i.lovejojo.ren/tags/HttpClient/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记之程序员修炼之道(The Pragmatic Programmer)]]></title>
    <link href="http://i.lovejojo.ren/2015/12/02/reading-the-pragmatic-programmer/"/>
    <id>http://i.lovejojo.ren/2015/12/02/reading-the-pragmatic-programmer/</id>
    <published>2015-12-02T06:17:28.000Z</published>
    <updated>2017-05-27T06:59:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> 《程序员修炼之道》由一系列的独立的部分组成，涵盖的主题从个人责任、职业发展，直到用于使代码保持灵活、并且易于改编和复用的各种架构技术。利用许多富有娱乐性的奇闻轶事、有思想性的例子以及有趣的类比，全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。无论你是初学者，是有经验的程序员，还是软件项目经理，本书都适合你阅读。 –<a href="http://book.douban.com/subject/1152111/" target="_blank" rel="external">豆瓣</a></p>
</blockquote>
<a id="more"></a>
<h2 id="注重实效的思想基础">注重实效的思想基础</h2><ul>
<li>破窗效应</li>
<li>经营自己的知识资产（定期、多元化、管理分享、低买高卖、重新评估和平衡）</li>
<li><p>目标设定</p>
<ul>
<li>每年至少学习一种新语言</li>
<li>每季度阅读一本技术书籍</li>
<li>也要阅读非技术书籍</li>
<li>上课</li>
<li>参加本地用户组织</li>
<li>试验不同的编程环境</li>
<li>跟上潮流</li>
<li>上网</li>
</ul>
</li>
<li>如何交流</li>
</ul>
<h2 id="注重实效的途径">注重实效的途径</h2><ul>
<li>DRY-Don’t Repeat Yourself</li>
<li>正交性（消除无关事物之间的影响）</li>
<li>可撤销性（不存在最终决策）-代码“摇滚”</li>
<li><p>用曳光弹找到目标-直观、快速、可重复</p>
<ul>
<li>用户及早看到能工作的东西（及时反馈）</li>
<li>开发者构建了一个他们能在其中工作的结构（便于团队开发）</li>
<li>有一个集成平台（小批量集成）</li>
<li>投资方可以看到有可演示的东西</li>
<li>工作进展会更加清晰明朗</li>
</ul>
</li>
<li>原型与便签</li>
</ul>
<h2 id="有效的工具">有效的工具</h2><ul>
<li>纯文本的威力</li>
<li><p>Shell</p>
<ul>
<li>GUI所见及所得与所见即全部所得</li>
</ul>
</li>
<li>用好一种编辑器</li>
<li>源码控制</li>
<li><p>调试</p>
<ul>
<li>不要假定，要证明</li>
</ul>
</li>
<li>代码生成器<ul>
<li>Write Code That Writes Code</li>
</ul>
</li>
</ul>
<h2 id="编码习惯">编码习惯</h2><ul>
<li>避免靠巧合编程，深思熟虑地去编程</li>
<li>估算算法速率</li>
<li>早重构，常重构（肿瘤）<ul>
<li>不要新增功能</li>
<li>确保拥有良好测试</li>
<li>短小、深思熟虑的步骤</li>
</ul>
</li>
<li>易于测试的代码</li>
</ul>
<h2 id="项目开始之前的注意点">项目开始之前的注意点</h2><ul>
<li>需求之坑<ul>
<li>不要搜集需求-挖掘需求</li>
<li>与用户一起工作，像用户一样思考</li>
</ul>
</li>
</ul>
<h2 id="注重实效的项目">注重实效的项目</h2><ul>
<li>团队</li>
<li>自动化无处不在</li>
<li>无情的测试（编一点测一点）</li>
<li>温和地超出用户期望</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> 《程序员修炼之道》由一系列的独立的部分组成，涵盖的主题从个人责任、职业发展，直到用于使代码保持灵活、并且易于改编和复用的各种架构技术。利用许多富有娱乐性的奇闻轶事、有思想性的例子以及有趣的类比，全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。无论你是初学者，是有经验的程序员，还是软件项目经理，本书都适合你阅读。 –<a href="http://book.douban.com/subject/1152111/">豆瓣</a></p>
</blockquote>]]>
    
    </summary>
    
      <category term="programmer" scheme="http://i.lovejojo.ren/tags/programmer/"/>
    
      <category term="阅读" scheme="http://i.lovejojo.ren/categories/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记之代码整洁之道(Clean Code)]]></title>
    <link href="http://i.lovejojo.ren/2015/12/02/reading-clean-code/"/>
    <id>http://i.lovejojo.ren/2015/12/02/reading-clean-code/</id>
    <published>2015-12-02T06:12:19.000Z</published>
    <updated>2015-12-07T11:59:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> 软件质量，不但依赖于架构及项目管理，而且与代码质量紧密相关。这一点，无论是敏捷开发流派还是传统开发流派，都不得不承认。《代码整洁之道》提出一种观念：代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。作为编程领域的佼佼者，《代码整洁之道》作者给出了一系列行之有效的整洁代码操作实践。这些实践在《代码整洁之道》中体现为一条条规则(或称“启示”)，并辅以来自现实项目的正、反两面的范例。只要遵循这些规则，就能编写出干净的代码，从而有效提升代码质量。<br> 《代码整洁之道》阅读对象为一切有志于改善代码质量的程序员及技术经理。书中介绍的规则均来自作者多年的实践经验，涵盖从命名到重构的多个编程方面，虽为一“家”之言，然诚有可资借鉴的价值。 –<a href="http://book.douban.com/subject/4199741/" target="_blank" rel="external">豆瓣</a></p>
</blockquote>
<ul>
<li>有意义的命名</li>
<li>方法<ul>
<li>短</li>
<li>标识参数丑陋(bool)</li>
<li>抽离try-catch块</li>
</ul>
</li>
<li>注释<ul>
<li>不要留下注释后的代码</li>
<li>方法描述中存在无用的循规式注释，需要建立统一的代码注释规范</li>
</ul>
</li>
<li>良好的代码格式<ul>
<li>统一团队的代码格式</li>
</ul>
</li>
<li>异常处理<ul>
<li>少用null</li>
</ul>
</li>
<li>边界处理<ul>
<li>尽量提供的api里不要用map</li>
</ul>
</li>
<li>单元测试<ul>
<li>快速（Fast）</li>
<li>独立（Independent）</li>
<li>可重复（Repeatable）</li>
<li>自足验证（Self-validating）</li>
<li>及时（Timely）</li>
<li>三要素：可读性、可读性、可读性</li>
</ul>
</li>
<li>类<ul>
<li>短小</li>
<li>单一职责</li>
<li>内聚</li>
</ul>
</li>
<li>边界<ul>
<li>map</li>
<li>学习性测试</li>
</ul>
</li>
<li>童子军军规<ul>
<li>当你离开一个地方的时候，要让它比你来的时候更加整洁干净</li>
<li>重构</li>
<li>单元测试</li>
</ul>
</li>
<li>code smell<ul>
<li>注释</li>
<li>环境</li>
<li>函数</li>
<li>一般性问题</li>
<li>java</li>
<li>名称</li>
<li>测试</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> 软件质量，不但依赖于架构及项目管理，而且与代码质量紧密相关。这一点，无论是敏捷开发流派还是传统开发流派，都不得不承认。《代码整洁之道》提出一种观念：代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。作为编]]>
    </summary>
    
      <category term="clean code" scheme="http://i.lovejojo.ren/tags/clean-code/"/>
    
      <category term="阅读" scheme="http://i.lovejojo.ren/categories/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[github上Fork项目后的常用的操作指南]]></title>
    <link href="http://i.lovejojo.ren/2015/12/02/github-fork-operation/"/>
    <id>http://i.lovejojo.ren/2015/12/02/github-fork-operation/</id>
    <published>2015-12-02T03:58:23.000Z</published>
    <updated>2015-12-08T03:07:03.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>我们经常会从github中fork一些项目，fork完之后会有哪些常用的操作呢？<br>现在把经验分享给大家，希望有利于大家参与到开源的项目来。</p>
</blockquote>
<h2 id="提交自己本地修改到自己的项目">提交自己本地修改到自己的项目</h2><p>此步骤即最基本的git修改操作<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/renliufeng/mojo</span><br><span class="line"><span class="keyword">cd</span> mojo</span><br><span class="line">git <span class="built_in">add</span> .</span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">'modify'</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<h2 id="自己更新的代码想提交给原作者合并">自己更新的代码想提交给原作者合并</h2><p>一般在更新完自己的代码之后，如果希望原作者的代码一起支持变更，需要在github上发起PullRequest。在界面上边有个 Pull Requests ，点进去，然后就可以见到你和原作者项目的差异的代码，上面有个  “Create pull request”. 点击后会让你写上本次提交合并“主题”，还有相关提交修改的内容的一些介绍， 这方便原作者理解和了解你的修改，并会考虑是否给你的提交合并到他自己本身的代码。 写完这些信息后， 然后提交过去。 作者的项目就会收到你这个请求了。如果他认为你写的代码没问题，介绍也合理， 就会合并到你的代码到他的主代码中。</p>
<h2 id="更新自己的代码和原作者的项目保持一致">更新自己的代码和原作者的项目保持一致</h2><p>经过一段时间， 有可能作者原来的代码变化很大， 你想接着在他最新的代码上修改， 这时你需要合并原作者的最新代码过来， 让你的项目变成最新的。这个需要接着在你的本地操作。<br>假设前提是， 你现在你的代码是克隆下来在本地的。 例如我 Fork 了 sri (Mojo 的作者) 的 Mojo 项目， 我的项目地址是<code>https://github.com/renliufeng/mojo</code>我现在克隆这个在我的本地了。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/renliufeng/mojo</span><br><span class="line">cd mojo</span><br></pre></td></tr></table></figure></p>
<p>接着， 我只需要添加 sri 项目的地址,也就是主项目的 remote 地址， 我们加入后， 给代码 fetch 过来， 然后进行 merge 的合并操作。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> sri <span class="keyword">https</span>://github.com/kraih/mojo</span><br><span class="line">git fetch sri</span><br><span class="line">git <span class="built_in">merge</span> sri/master</span><br></pre></td></tr></table></figure></p>
<p>这样就能给你的当前本地的项目变成和原作者的主项目一样。 然后你按正常的流程进行修改并提交到你的项目就好了。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">'更新到原作者的主分支的进度'</span></span><br><span class="line">git <span class="keyword">push</span> origin</span><br></pre></td></tr></table></figure></p>
<p>要接着给修改提交给原作者，请参照第二步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>我们经常会从github中fork一些项目，fork完之后会有哪些常用的操作呢？<br>现在把经验分享给大家，希望有利于大家参与到开源的项目来。</p>
</blockquote>
<h2 id="提交自己本地修改到自己的项目">提交自己本地修改到]]>
    </summary>
    
      <category term="fork" scheme="http://i.lovejojo.ren/tags/fork/"/>
    
      <category term="github" scheme="http://i.lovejojo.ren/tags/github/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用七牛为Hexo存储图片和CDN加速]]></title>
    <link href="http://i.lovejojo.ren/2015/11/27/hexo-qiniu/"/>
    <id>http://i.lovejojo.ren/2015/11/27/hexo-qiniu/</id>
    <published>2015-11-27T07:48:56.000Z</published>
    <updated>2015-12-08T03:34:42.000Z</updated>
    <content type="html"><![CDATA[<p>使用七牛为Hexo存储图片<br>Hexo文章中的图片，可以放在本地，然后和静态文件一起发布（部署）到你的空间。我以前就是这么干的，见这里。<br>今天又看Hexo官方文档，有支持七牛的插件，尝试了一下，发现是不可用的，因为插件代码中有一些路径有问题，我已经提交了bug给作者。不过因此我开始试用了七牛，感觉一些功能还是很不错的，而且10GB免费存储，每月10GB免费下载流量…，用做博客图片等资源存储，正合适。</p>
<p>注册和安装七牛工具<br>首先需要申请七牛账号，如果你也需要申请，请访问这个链接（<a href="https://portal.qiniu.com/signup?code=3lb1qxh8ee5oy），" target="_blank" rel="external">https://portal.qiniu.com/signup?code=3lb1qxh8ee5oy），</a> 这样我可以获得更多的流量（5GB）。<br>然后登录七牛网站，按照官网说明创建空间。比如我创建的空间是shiqichan，那么我上传的文件，就可以通过这样的URL访问：<br><code>http://shiqichan.qiniudn.com/myImg.png</code><br>我上传图片文件，使用了七牛提供的命令行工具，当然你也可以使用七牛提供的web界面上传。使用命令行上传的好处是，批量增量的上传。可在这里下载，有Mac版本。<br>在Mac下的安装办法，解压缩到某个目录下，比如我是存放在/opt/tools/qrsync下了。设置PATH：<br><code>sudo vim /etc/paths</code><br>将qrsync路径加进去，这样就可以直接输入命令访问了。<br>Hexo使用七牛图片的步骤<br>我是在blog目录下，创建了个cdn目录，用来存放图片等资源文件。<br>hexo的配置文件，默认日志的url方式是：<br><code>http://yoursite/year/month/day/your-post-name</code><br>做了调整，在_config.yml文件中修改：<br><code>permalink: :title/</code><br>然后，在cdn目录下，创建日志名称的目录，比如本文的目录名称就是：<br><code>use-qiniu-store-image-for-hexo</code><br>在这个目录下放置本文的图片，然后使用qrsync命令同步到七牛。再通过七牛的web界面复制出这个图片的url，比如：<br><code>http://shiqichan.qiniudn.com/use-qiniu-store-image-for-hexo/qiniu.png</code><br>最后，就是在日志文件中加入image标签：<br><code>![](http://shiqichan.qiniudn.com/use-qiniu-store-image-for-hexo/qiniu.png)</code><br>样式上对图片的处理<br>这样做显示的图片，有个问题，有时候显示图片太大了。<br>查了一下hexo默认样式有关图片的设置（见thems/light/source/css/_partial/article.styl）：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span>, <span class="tag">video</span></span><br><span class="line">  <span class="attribute">max-width</span> <span class="number">300px</span></span><br><span class="line">  <span class="attribute">height</span> <span class="attribute">auto</span></span><br><span class="line">  <span class="attribute">border</span> <span class="attribute">none</span></span><br></pre></td></tr></table></figure></p>
<p>这是<a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">stylus</a>，用来生成css文件的。对图片宽度做了约束，但没有对图片高度做约束，如果宽度不高而高度很大，就会出现问题。<br>改为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">box-shadow</span><span class="params">(args…)</span></span></span><br><span class="line">-webkit-<span class="attribute">box-shadow</span> args</span><br><span class="line">-moz-<span class="attribute">box-shadow</span> args</span><br><span class="line"><span class="attribute">box-shadow</span> args</span><br><span class="line"><span class="tag">img</span>, <span class="tag">video</span></span><br><span class="line"><span class="attribute">max-width</span> <span class="number">300px</span></span><br><span class="line"><span class="attribute">max-height</span> <span class="number">300px</span></span><br><span class="line"><span class="attribute">border</span> <span class="attribute">none</span></span><br><span class="line"><span class="attribute">box-shadow</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="hexcolor">#aaaaaa</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用七牛为Hexo存储图片<br>Hexo文章中的图片，可以放在本地，然后和静态文件一起发布（部署）到你的空间。我以前就是这么干的，见这里。<br>今天又看Hexo官方文档，有支持七牛的插件，尝试了一下，发现是不可用的，因为插件代码中有一些路径有问题，我已经提交了bug给作]]>
    </summary>
    
      <category term="hexo" scheme="http://i.lovejojo.ren/tags/hexo/"/>
    
      <category term="七牛" scheme="http://i.lovejojo.ren/tags/%E4%B8%83%E7%89%9B/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人博客SEO技巧]]></title>
    <link href="http://i.lovejojo.ren/2015/11/27/blog-seo/"/>
    <id>http://i.lovejojo.ren/2015/11/27/blog-seo/</id>
    <published>2015-11-27T03:43:33.000Z</published>
    <updated>2015-11-27T07:09:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>搜索引擎优化(search engine optimization,简称seo)：指遵循搜索引擎的搜索原理，对网站结构、网页文字语言和站点间互动外交略等进行合理规划部署，以改善网站在搜索引擎的搜索表现，进而增加客户发现并访问网站的可能性的这样一个过程. 搜索引擎优化也是一种科学的发展观和方法论，它随着搜索引擎的发展而发展, 同时也促进了搜索引擎的发展。</p>
</blockquote>
<p>对博客进行搜索引擎优化也就是博客内容被搜索引擎收录及优先排序，以此增加博客的点击率和曝光度，最终提升博客的综合能力。写博客的人，内容不仅要对用户友好，让大部分人都能看懂，而且也要对搜索引擎友好。</p>
<p>下面提供一些技巧<br>1：博客要经常保持更新，文字始终紧紧围绕关键字，围绕网站主题。<br>2：SEO优化重点以文章内容页优化为主。<br>3：适当给每个页面增加keyword(关键词)、Description(页面描述)、robots(搜索引擎抓取器)等标签。<br>4：在新文章中适当增加一些老文章的链接，文章的内部链接一定要自然。<br>5：新博客可以建立单一关键词策略，以增强网站对搜索引擎的权威性。如卢松松博客建立初期只有一个”网站设计”关键词。<br>6：栏目分类尽量使用目录形式。如：<a href="http://lusongsong.com/youhua/而不是http://lusongsong.com/youhua.html" target="_blank" rel="external">http://lusongsong.com/youhua/而不是http://lusongsong.com/youhua.html</a><br>7：可以在网页底部加上站点地图sitemap，HTML格式是给用户看的，XML格式是给搜索引擎看的。<br>8：比较重要文章的URL可以使用拼音、英文和分割线等网址结构。<br>9：外部链接建设很重要，新博客推荐使用工具<a href="http://tool.lusongsong.com/seo/" target="_blank" rel="external">http://tool.lusongsong.com/seo/</a><br>10：垃圾留言一定要删除，非常影响排名。<br>11：记得给每个博文插图加上和文章内容相关的alt信息，并在图片周围添加相关信息。<br>12：文章中相同的关键词不能过多，如果非要堆砌关键词，可适当使用长尾关键词。<br>13：每篇文章的结尾处可加入“原创文章如转载，请注明出处”“本文首发于XXX网站”等信息，对SEO有一定帮助。<br>14：通过添加TAG标签可以增强主题的相关性和被搜索的概率。<br>15：文章的Title最好以“文章标题-博客名称”形式出现。<br>16：文章标题最好能出现一次关键字。<br>17：关键字最好在第一段或最后一段能够出现。<br>18：不要选择非常热门的关键词。<br>19：不要一次性增加大量连接，更不要一次性删减大量连接。<br>20：坚持!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>搜索引擎优化(search engine optimization,简称seo)：指遵循搜索引擎的搜索原理，对网站结构、网页文字语言和站点间互动外交略等进行合理规划部署，以改善网站在搜索引擎的搜索表现，进而增加客户发现并访问网站的可能性的这样一个过]]>
    </summary>
    
      <category term="blog" scheme="http://i.lovejojo.ren/tags/blog/"/>
    
      <category term="seo" scheme="http://i.lovejojo.ren/tags/seo/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置git多SSH-Key共存]]></title>
    <link href="http://i.lovejojo.ren/2015/11/25/git-ssh-key/"/>
    <id>http://i.lovejojo.ren/2015/11/25/git-ssh-key/</id>
    <published>2015-11-25T11:21:27.000Z</published>
    <updated>2015-12-02T04:02:56.000Z</updated>
    <content type="html"><![CDATA[<p>今天整理下以前在配置git过程中的SSH-Key共存的方法</p>
<h2 id="git的入门学习">git的入门学习</h2><p>推荐廖雪峰的网站: <a href="http://www.liaoxuefeng.com" target="_blank" rel="external">http://www.liaoxuefeng.com</a></p>
<h2 id="关于多个SSH_Key的共存">关于多个SSH Key的共存</h2><p>在使用git过程中，会遇到配置多个ssh-key的共存情况，比如一个连接公司的git，一个用来连接github，或者两个github账户。这里以github和oschina两个ssh-key共存举例。</p>
<h3 id="首先配置github，生成ssh-key">首先配置github，生成ssh-key</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="constant">C</span> “aaa<span class="variable">@gmail</span>.com” -f ~<span class="regexp">/.ssh/github</span>_id_rsa</span><br></pre></td></tr></table></figure>
<p>过程中会要求设置密码，直接回车为空就可以了,此时会生成两个文件githubidrsa和githubidrsa.pub 为了方便区分多个ssh-key，这里我们指定名为githubidrsa，如果不指定会按照生成默认的idrsa</p>
<h3 id="添加SSH_agent">添加SSH agent</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">ssh</span>-<span class="keyword">add </span>~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure>
<p>由于在默认情况下，SSH agent只会去读取id_rsa，为了使新生成的github_id_rsa能被SSH agent读取，将github_id_rsa添加到SSH agent</p>
<h3 id="ssh-key粘贴到github上">ssh-key粘贴到github上</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/.ssh/github</span>_id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>可以查看生成的ssh-key，将ssh-key粘贴到github上,并用相同的方法生成oschina的ssh-key，并粘贴到oschina上</p>
<h3 id="ssh共存配置">ssh共存配置</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~<span class="regexp">/.ssh/config</span></span><br></pre></td></tr></table></figure>
<p>为了让两个ssh-key共存，在/.ssh下生成一个config文件,通过config文件指定不同的私钥对应的不同git服务器<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#GitHub</span>(aaa<span class="variable">@gmail</span>.com)</span><br><span class="line"><span class="tag">Host</span> <span class="tag">github</span><span class="class">.com</span></span><br><span class="line"><span class="tag">HostName</span> <span class="tag">github</span><span class="class">.com</span></span><br><span class="line"><span class="tag">User</span> <span class="tag">git</span></span><br><span class="line"><span class="tag">IdentityFile</span> ~/<span class="class">.ssh</span>/<span class="tag">github_id_rsa</span> </span><br><span class="line"></span><br><span class="line"><span class="id">#OSChina</span>(bbb<span class="variable">@gmail</span>.com)</span><br><span class="line"><span class="tag">Host</span> <span class="tag">git</span><span class="class">.oschina</span><span class="class">.net</span></span><br><span class="line"><span class="tag">HostName</span> <span class="tag">git</span><span class="class">.oschina</span><span class="class">.net</span></span><br><span class="line"><span class="tag">User</span> <span class="tag">git</span></span><br><span class="line"><span class="tag">IdentityFile</span> ~/<span class="class">.ssh</span>/<span class="tag">oschina_id_rsa</span></span><br><span class="line">然后可以测试下是否成功连接</span><br></pre></td></tr></table></figure></p>
<h3 id="检查配置是否起作用">检查配置是否起作用</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T github<span class="class">.com</span></span><br><span class="line">ssh -T git<span class="class">.oschina</span><span class="class">.net</span></span><br></pre></td></tr></table></figure>
<p>过程中会问你是否添加到knownhosts，yes即可，会在.ssh目录下生成一个known_hosts文件</p>
<h3 id="git_config_配置">git config 配置</h3><p>需要注意一点的是，git服务一般会根据配置文件的user.name和user.email来获取作者信息(比如上面的github的aaa@gmail.com和oschina的bbb@gmail.com)，如果多账户信息不同的话，需要注意在使用前修改配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看配置信息</span></span><br><span class="line">git config --<span class="keyword">list</span></span><br><span class="line"><span class="comment">#设置全局的name和email</span></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">"xxx"</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">"xxx.gmail.com"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天整理下以前在配置git过程中的SSH-Key共存的方法</p>
<h2 id="git的入门学习">git的入门学习</h2><p>推荐廖雪峰的网站: <a href="http://www.liaoxuefeng.com" target="_blank" rel="e]]>
    </summary>
    
      <category term="git" scheme="http://i.lovejojo.ren/tags/git/"/>
    
      <category term="ssh" scheme="http://i.lovejojo.ren/tags/ssh/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo在github上搭建自己的博客]]></title>
    <link href="http://i.lovejojo.ren/2015/11/25/hexo-user-guide/"/>
    <id>http://i.lovejojo.ren/2015/11/25/hexo-user-guide/</id>
    <published>2015-11-25T11:20:59.000Z</published>
    <updated>2015-12-10T09:40:18.000Z</updated>
    <content type="html"><![CDATA[<p>最近想写个博客玩一样，就尝试了hexo，使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度.</p>
<p>node,git版本变化日新月异,每段时间都会有不同,而这个小不同可能直接导致搭建失败.这里把我搭建的过程记录下来.如果将来搭建失败,可以参考,下载对应的版本尝试.</p>
<p>我使用的版本(mac系统下:)<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">node</span>: <span class="string">v0.10.22</span></span><br><span class="line"><span class="attribute">git</span>: <span class="string">git version 2.3.2  </span></span><br><span class="line"><span class="attribute">hexo</span>: <span class="string">3.1</span></span><br></pre></td></tr></table></figure></p>
<h2 id="搭建步骤">搭建步骤</h2><h3 id="安装好node和git,注册好github账号-">安装好node和git,注册好github账号.</h3><p>注意:用户名一定不能有大写.<br>想下载最新的git可以尝试这个地址: <a href="http://msysgit.github.io/" target="_blank" rel="external">http://msysgit.github.io/</a></p>
<h3 id="安装hexo">安装hexo</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo</span></span><br></pre></td></tr></table></figure>
<p>这里常常安装了一半就卡住装不下去了,推荐安装淘宝镜像:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> cnpm <span class="comment">--registry=https://registry.npm.taobao.org</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="创建hexo文件夹">创建hexo文件夹</h3><p>自己找一个喜欢的路径,创建hexo文件夹,例如在 ~\hexo下的.<br>cmd窗口切换到对应的目录下,然后执行初始化,等待结束<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> init</span><br></pre></td></tr></table></figure></p>
<h3 id="安装依赖">安装依赖</h3><p>继续执行，安装好所有的依赖<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<h3 id="完成本地安装">完成本地安装</h3><p>继续在项目目录下~\hexo执行一下语句<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成文件</span></span><br><span class="line">hexo generate  </span><br><span class="line"><span class="comment">// 开启服务器</span></span><br><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<p>然后在打开浏览器 localhost:4000 ,就可以看到,本地已经安装好了.</p>
<h3 id="在github上创建博客仓库">在github上创建博客仓库</h3><p>　　选择New repository跳转的后如下填写:(其中Repository name的格式是 ‘用户名’.github.io),然后点创建仓库。</p>
<h3 id="创建SSH_keys，并且配置到github上">创建SSH keys，并且配置到github上</h3><p>　　具体的请参考ssh的指导文档，很简单的</p>
<h3 id="配置_config-yml文件并发布">配置_config.yml文件并发布</h3><p>在 ~\hexo 下,有一个文件叫 _config.yml,打开它,拉到最底下,做如下修改:　<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: github     <span class="comment">//改成github</span></span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/renliufeng/renliufeng.github.io    //改成自己的用户名</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>配置完以后还是在~\hexo下执行:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>执行完以后,如果报错 Error: Deployer not found : github,则执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>同时修改 _config.yml :<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git      <span class="comment">//改成git</span></span><br></pre></td></tr></table></figure></p>
<p>然后再执行:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>然后访问: <a href="http://renliufeng.github.io/" target="_blank" rel="external">http://renliufeng.github.io/</a> (用户名改成自己的),就可以看到了.</p>
<p>注意,每次修改本地文件后，需要  hexo generate 才能保存。每次使用命令时，都要在 ~\hexo 目录下 </p>
<hr>
<h2 id="核心命令">核心命令</h2><h3 id="常用命令">常用命令</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo init <span class="comment">#初始化</span></span><br><span class="line"><span class="variable">$ </span>hexo new [layout] <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line"><span class="variable">$ </span>hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line"><span class="variable">$ </span>hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line"><span class="variable">$ </span>hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line"><span class="variable">$ </span>hexo deploy <span class="comment">#将.deploy目录部署到GitHub </span></span><br><span class="line"><span class="variable">$ </span>hexo clean /<span class="regexp">/清楚缓存和发布文件</span></span><br></pre></td></tr></table></figure>
<h3 id="简写命令">简写命令</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo n == hexo new</span><br><span class="line"><span class="variable">$ </span>hexo g == hexo generate</span><br><span class="line"><span class="variable">$ </span>hexo s == hexo server</span><br><span class="line"><span class="variable">$ </span>hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="常用复合命令">常用复合命令</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">d</span> -<span class="keyword">g</span> 先生成静态页面，再部署到github</span><br><span class="line">$ hexo s -<span class="keyword">g</span> 先生成静态页面，再本地开启server</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="问题解决">问题解决</h2><p>（1） hexo可能更新过了,所以老的hexo可能会报错:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/Release/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/default/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class="line">&#123; [<span class="string">Error:</span> Cannot find module <span class="string">'./build/Debug/DTraceProviderBindings'</span>] <span class="string">code:</span> <span class="string">'MODULE_NOT_FOUND'</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>解决办法如下,执行:<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install hexo --<span class="literal">no</span>-optional</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近想写个博客玩一样，就尝试了hexo，使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度.</p>
<p>node,git版本变化日新月异,每段时间都会有不]]>
    </summary>
    
      <category term="github" scheme="http://i.lovejojo.ren/tags/github/"/>
    
      <category term="hexo" scheme="http://i.lovejojo.ren/tags/hexo/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://i.lovejojo.ren/2015/11/25/hello-world/"/>
    <id>http://i.lovejojo.ren/2015/11/25/hello-world/</id>
    <published>2015-11-25T10:20:59.000Z</published>
    <updated>2015-11-27T07:09:56.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hexo" scheme="http://i.lovejojo.ren/tags/hexo/"/>
    
      <category term="技术" scheme="http://i.lovejojo.ren/categories/tech/"/>
    
  </entry>
  
</feed>
